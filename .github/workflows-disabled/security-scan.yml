# Security scanning workflow for GRC AI Platform
# Runs comprehensive security checks on code, dependencies, and containers

name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly security scans on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

permissions:
  security-events: write
  actions: read
  contents: read

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --audit-level moderate
          npm audit --json > audit-results.json
        continue-on-error: true

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: audit-results.json

      - name: Snyk dependency scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --file=package.json

  code-scan:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=grc-ai-platform
            -Dsonar.organization=your-org
            -Dsonar.sources=packages/
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/coverage/**
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: GitLeaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t grc-ai-platform:${{ github.sha }} .

      - name: Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'grc-ai-platform:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Snyk container scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: 'grc-ai-platform:${{ github.sha }}'
          args: --severity-threshold=medium

  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkov IaC scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform,dockerfile,github_actions
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'checkov-results.sarif'

      - name: TFSec Terraform security scan
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          soft_fail: true

  compliance-check:
    name: Compliance Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: License compliance check
        run: |
          npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC' --excludePrivatePackages

      - name: GDPR compliance check
        run: |
          # Custom script to check for GDPR compliance patterns
          echo "Checking for GDPR compliance patterns..."
          grep -r "personal.*data\|pii\|gdpr" packages/ --include="*.ts" --include="*.js" || true

      - name: Security policy validation
        run: |
          # Check for required security files
          test -f SECURITY.md || echo "Warning: SECURITY.md not found"
          test -f .github/workflows/security-scan.yml || echo "Error: Security scan workflow missing"

  multi-tenant-security:
    name: Multi-Tenant Security Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Tenant isolation check
        run: |
          # Check for proper tenant isolation patterns
          echo "Checking tenant isolation patterns..."
          grep -r "tenantId\|tenant_id" packages/ --include="*.ts" --include="*.js" || echo "Warning: Limited tenant isolation patterns found"

      - name: Data access validation
        run: |
          # Check for potential data leakage patterns
          echo "Checking for data access patterns..."
          grep -r "SELECT \*\|find({})\|findAll()" packages/ --include="*.ts" --include="*.js" || echo "No broad data access patterns found"

      - name: Authorization check
        run: |
          # Check for authorization middleware usage
          echo "Checking authorization patterns..."
          grep -r "authorize\|checkPermission\|rbac" packages/ --include="*.ts" --include="*.js" || echo "Warning: Limited authorization patterns found"

  security-report:
    name: Security Report Generation
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, secret-scan, container-scan, infrastructure-scan, compliance-check, multi-tenant-security]
    if: always()
    steps:
      - name: Generate security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          echo "## Scan Results Summary" >> security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- Code Analysis: ${{ needs.code-scan.result }}" >> security-report.md
          echo "- Secret Detection: ${{ needs.secret-scan.result }}" >> security-report.md
          echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-report.md
          echo "- Infrastructure Scan: ${{ needs.infrastructure-scan.result }}" >> security-report.md
          echo "- Compliance Check: ${{ needs.compliance-check.result }}" >> security-report.md
          echo "- Multi-Tenant Security: ${{ needs.multi-tenant-security.result }}" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## ðŸ”’ Security Scan Results\n\n' + report
            });