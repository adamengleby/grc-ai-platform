name: Deploy to Azure Production

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: grc-backend-prod
  AZURE_WEBAPP_PACKAGE_PATH: './packages/backend'
  NODE_VERSION: '20.x'
  CONTAINER_REGISTRY: acrgrcplatformprod.azurecr.io
  MCP_IMAGE_NAME: grc-mcp-server

jobs:
  # Validate Azure Resources (skip infrastructure provisioning)
  validate-azure:
    runs-on: ubuntu-latest
    outputs:
      webapp-name: ${{ env.AZURE_WEBAPP_NAME }}
      webapp-url: "https://grc-backend-prod.azurewebsites.net"
      static-web-app-url: "https://grc-ai-platform-prod.azurestaticapps.net"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Validate Azure Resources
      run: |
        echo "Validating existing Azure resources..."

        # Check if Resource Group exists
        if az group show --name rg-grc-ai-platform-prod > /dev/null 2>&1; then
          echo "✅ Resource Group rg-grc-ai-platform-prod exists"
        else
          echo "❌ Resource Group rg-grc-ai-platform-prod not found"
          exit 1
        fi

        # Check if Container Registry exists
        if az acr show --name acrgrcplatformprod > /dev/null 2>&1; then
          echo "✅ Container Registry acrgrcplatformprod exists"
        else
          echo "❌ Container Registry acrgrcplatformprod not found"
          exit 1
        fi

        echo "✅ All required Azure resources are available"

  # Build and Deploy Backend App Service
  deploy-backend:
    needs: validate-azure
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install monorepo dependencies
      run: |
        npm install

    - name: Prepare minimal backend deployment
      run: |
        # Create deployment directory for minimal backend
        mkdir -p backend-deploy

        # Copy the zero-dependency minimal backend
        cp minimal-backend.cjs backend-deploy/

        # Create a minimal package.json for App Service
        cat > backend-deploy/package.json << 'EOF'
        {
          "name": "grc-minimal-backend",
          "version": "1.0.0",
          "description": "Zero-dependency GRC Platform Backend",
          "main": "minimal-backend.cjs",
          "scripts": {
            "start": "node minimal-backend.cjs"
          },
          "engines": {
            "node": ">=18.0.0"
          }
        }
        EOF

        # Create deployment zip
        cd backend-deploy
        zip -r ../backend-deployment.zip . -x "*.git*"

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Azure App Service if not exists
      run: |
        # Check if App Service exists
        if ! az webapp show --name grc-backend-prod --resource-group rg-grc-ai-platform-prod >/dev/null 2>&1; then
          echo "Creating Azure App Service..."

          # Create App Service Plan if needed
          if ! az appservice plan show --name grc-backend-plan --resource-group rg-grc-ai-platform-prod >/dev/null 2>&1; then
            az appservice plan create \
              --name grc-backend-plan \
              --resource-group rg-grc-ai-platform-prod \
              --location eastus \
              --sku B1 \
              --is-linux
          fi

          # Create Web App
          az webapp create \
            --name grc-backend-prod \
            --resource-group rg-grc-ai-platform-prod \
            --plan grc-backend-plan \
            --runtime "NODE:20-lts"
        else
          echo "App Service already exists"
        fi

    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: grc-backend-prod
        package: backend-deployment.zip

    - name: Configure Azure App Service Environment
      run: |
        az webapp config appsettings set \
          --name grc-backend-prod \
          --resource-group rg-grc-ai-platform-prod \
          --settings \
            USE_MOCK_AUTH=true \
            NODE_ENV=production \
            USE_MOCK_DATA=true \
            LOG_LEVEL=info \
            PORT=8080 \
            WEBSITES_PORT=8080 \
            SCM_DO_BUILD_DURING_DEPLOYMENT=false \
            WEBSITE_RUN_FROM_PACKAGE=1

    - name: Configure App Service Startup
      run: |
        az webapp config set \
          --name grc-backend-prod \
          --resource-group rg-grc-ai-platform-prod \
          --startup-file "node minimal-backend.cjs"

    - name: Enable App Service Logs
      run: |
        az webapp log config \
          --name grc-backend-prod \
          --resource-group rg-grc-ai-platform-prod \
          --application-logging filesystem \
          --level information

  # Build and Deploy MCP Server Container
  deploy-mcp-server:
    needs: validate-azure
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.CONTAINER_REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install monorepo dependencies
      run: |
        npm install

    - name: Build MCP Server
      run: |
        cd packages/mcp-server
        npm run build

    - name: Build MCP Server Docker image
      run: |
        cd packages/mcp-server
        docker build -t ${{ env.CONTAINER_REGISTRY }}/${{ env.MCP_IMAGE_NAME }}:${{ github.sha }} .
        docker build -t ${{ env.CONTAINER_REGISTRY }}/${{ env.MCP_IMAGE_NAME }}:latest .

    - name: Push Docker image
      run: |
        docker push ${{ env.CONTAINER_REGISTRY }}/${{ env.MCP_IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.CONTAINER_REGISTRY }}/${{ env.MCP_IMAGE_NAME }}:latest

    - name: Deploy to Azure Container Instances
      uses: azure/aci-deploy@v1
      with:
        resource-group: rg-grc-ai-platform-prod
        location: eastus
        dns-name-label: grc-mcp-server-prod
        image: ${{ env.CONTAINER_REGISTRY }}/${{ env.MCP_IMAGE_NAME }}:${{ github.sha }}
        registry-login-server: ${{ env.CONTAINER_REGISTRY }}
        registry-username: ${{ secrets.ACR_USERNAME }}
        registry-password: ${{ secrets.ACR_PASSWORD }}
        name: aci-grc-mcp-server-prod
        ports: 3006
        cpu: 1
        memory: 2
        environment-variables: |
          NODE_ENV=production
          PORT=3006
          LOG_LEVEL=info

  # Build and Deploy Frontend
  deploy-frontend:
    needs: validate-azure
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Clear npm cache and install dependencies
      run: |
        npm cache clean --force
        rm -rf node_modules package-lock.json
        npm install

    - name: Build frontend with environment variables
      run: |
        cd packages/frontend
        rm -rf node_modules/.vite
        npm run build
      env:
        VITE_API_BASE_URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/v1
        VITE_MCP_SERVER_URL: https://grc-mcp-server-prod.eastus.azurecontainer.io:3006

    - name: Deploy to Azure Static Web Apps
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "/packages/frontend/dist"
        output_location: ""
        skip_app_build: true

  # Post-deployment validation
  validate-deployment:
    needs: [deploy-backend, deploy-mcp-server, deploy-frontend]
    runs-on: ubuntu-latest

    steps:
    - name: Wait for App Service to be ready
      run: |
        echo "Waiting for App Service to start..."
        sleep 60

    - name: Validate Backend Health
      run: |
        echo "Testing backend health endpoint..."
        for i in {1..5}; do
          if curl -f https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/v1/health; then
            echo "✅ Backend health check passed"
            break
          else
            echo "⏳ Attempt $i failed, retrying in 30s..."
            sleep 30
          fi
        done

    - name: Validate LLM Configurations Endpoint
      run: |
        echo "Testing LLM configurations endpoint (user's failing endpoint)..."
        curl -f https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/v1/simple-llm-configs

    - name: Validate MCP Server Health
      run: |
        curl -f https://grc-mcp-server-prod.eastus.azurecontainer.io:3006/health

    - name: Validate All API Endpoints
      run: |
        BASE_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/v1"
        echo "Testing all critical API endpoints..."

        curl -f "$BASE_URL/health" && echo "✅ Health endpoint working"
        curl -f "$BASE_URL/simple-llm-configs" && echo "✅ LLM configs endpoint working"
        curl -f "$BASE_URL/simple-agents" && echo "✅ Agents endpoint working"
        curl -f "$BASE_URL/simple-credentials" && echo "✅ Credentials endpoint working"
        curl -f "$BASE_URL/mcp-servers/tools" && echo "✅ MCP tools endpoint working"

    - name: Validate Frontend Deployment
      run: |
        curl -f ${{ needs.validate-azure.outputs.static-web-app-url }}

    - name: Final Integration Test
      run: |
        echo "🎉 All deployments successful!"
        echo "Frontend URL: ${{ needs.validate-azure.outputs.static-web-app-url }}"
        echo "Backend URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        echo "API Base URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/v1"