name: Deploy Minimal Backend

on:
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: grc-backend-prod
  NODE_VERSION: '20.x'

jobs:
  deploy-minimal-backend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create minimal deployment package
      run: |
        # Create deployment directory
        mkdir -p minimal-deploy

        # Copy the zero-dependency minimal backend
        cp minimal-backend.cjs minimal-deploy/

        # Create minimal package.json
        cat > minimal-deploy/package.json << 'EOF'
        {
          "name": "grc-minimal-backend",
          "version": "1.0.0",
          "description": "Zero-dependency GRC Platform Backend",
          "main": "minimal-backend.cjs",
          "scripts": {
            "start": "node minimal-backend.cjs"
          },
          "engines": {
            "node": ">=18.0.0"
          }
        }
        EOF

        # Create deployment zip
        cd minimal-deploy
        zip -r ../minimal-backend-deployment.zip .

    - name: Create Azure App Service if needed
      run: |
        # Check if App Service exists
        if ! az webapp show --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group rg-grc-ai-platform-prod >/dev/null 2>&1; then
          echo "Creating Azure App Service..."

          # Create App Service Plan if needed
          if ! az appservice plan show --name grc-backend-plan --resource-group rg-grc-ai-platform-prod >/dev/null 2>&1; then
            az appservice plan create \
              --name grc-backend-plan \
              --resource-group rg-grc-ai-platform-prod \
              --location eastus \
              --sku B1 \
              --is-linux
          fi

          # Create Web App
          az webapp create \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group rg-grc-ai-platform-prod \
            --plan grc-backend-plan \
            --runtime "NODE:20-lts"
        else
          echo "App Service already exists - updating deployment"
        fi

    - name: Deploy minimal backend to Azure
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: minimal-backend-deployment.zip

    - name: Configure Azure App Service for minimal backend
      run: |
        # Set environment variables
        az webapp config appsettings set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group rg-grc-ai-platform-prod \
          --settings \
            NODE_ENV=production \
            PORT=8080 \
            WEBSITES_PORT=8080 \
            SCM_DO_BUILD_DURING_DEPLOYMENT=false \
            WEBSITE_RUN_FROM_PACKAGE=1

        # Set startup command
        az webapp config set \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group rg-grc-ai-platform-prod \
          --startup-file "node minimal-backend.cjs"

        # Enable logging
        az webapp log config \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group rg-grc-ai-platform-prod \
          --application-logging filesystem \
          --level information

    - name: Wait for App Service startup
      run: |
        echo "Waiting for App Service to start..."
        sleep 60

    - name: Validate minimal backend deployment
      run: |
        echo "Testing minimal backend endpoints..."
        BASE_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/v1"

        # Test health endpoint
        for i in {1..5}; do
          if curl -f "$BASE_URL/health"; then
            echo "‚úÖ Health endpoint working"
            break
          else
            echo "‚è≥ Attempt $i failed, retrying in 30s..."
            sleep 30
          fi
        done

        # Test LLM configurations endpoint (the one that was failing)
        echo "Testing LLM configurations endpoint..."
        curl -f "$BASE_URL/simple-llm-configs" && echo "‚úÖ LLM configs endpoint working"

        # Test other critical endpoints
        curl -f "$BASE_URL/simple-agents" && echo "‚úÖ Agents endpoint working"
        curl -f "$BASE_URL/simple-credentials" && echo "‚úÖ Credentials endpoint working"
        curl -f "$BASE_URL/mcp-servers/tools" && echo "‚úÖ MCP tools endpoint working"

        echo "üéâ Minimal backend deployment successful!"
        echo "Backend URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        echo "API Base URL: $BASE_URL"