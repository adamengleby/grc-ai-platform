properties:
  template:
    containers:
    - image: mcr.microsoft.com/azure-functions/node:4-node20-appservice
      name: grc-backend-simple
      env:
      - name: NODE_ENV
        value: production
      - name: PORT
        value: "3005"
      - name: CORS_ORIGINS
        value: "https://grc-frontend-simple.calmmeadow-5080198e.australiasoutheast.azurecontainerapps.io"
      - name: POSTGRES_HOST
        value: "grc-postgres-syd.postgres.database.azure.com"
      - name: POSTGRES_PORT
        value: "5432"
      - name: POSTGRES_DATABASE
        value: "grc_platform"
      - name: POSTGRES_USER
        value: "grcadmin"
      - name: POSTGRES_PASSWORD
        value: "GrcAzure2024!"
      command: ["/bin/sh"]
      args: ["-c", "echo 'Starting GRC Backend with Agent Creation Support...' && echo '{\"name\":\"grc-backend\",\"version\":\"1.0.0\",\"dependencies\":{\"express\":\"^4.19.2\",\"cors\":\"^2.8.5\",\"pg\":\"^8.11.0\"}}' > package.json && npm install && curl -s -H 'Cache-Control: no-cache' -o server.js 'https://raw.githubusercontent.com/adamengleby/grc-ai-platform/master/packages/backend/containerapp-server-v7.js?cb=20250925-143000' || (echo 'GitHub download failed, using inline server with agent creation endpoint...' && cat > server.js << 'EOF'\nconst express = require('express');\nconst cors = require('cors');\nconst { Pool } = require('pg');\n\nconst app = express();\n\n// Middleware\napp.use(express.json({ limit: '10mb' }));\n\n// CORS configuration\nconst corsOptions = {\n  origin: process.env.CORS_ORIGINS ? process.env.CORS_ORIGINS.split(',') : ['*'],\n  credentials: true,\n  optionsSuccessStatus: 200\n};\napp.use(cors(corsOptions));\n\n// Tenant Context Middleware\nfunction extractTenantContext(req, res, next) {\n  const tenantId = req.headers['x-tenant-id'] || '00000000-0000-0000-0000-000000000001';\n  const userId = req.headers['x-user-id'] || '00000000-0000-0000-0000-000000000002';\n  console.log(`🔒 [Multi-Tenant] Request for tenant: ${tenantId}, user: ${userId}`);\n  req.tenantContext = { tenantId, userId, timestamp: new Date().toISOString() };\n  next();\n}\n\napp.use('/api', extractTenantContext);\n\n// Database connection\nlet dbPool = null;\n\nfunction getDatabase() {\n  if (!dbPool) {\n    dbPool = new Pool({\n      host: process.env.POSTGRES_HOST,\n      port: process.env.POSTGRES_PORT || 5432,\n      database: process.env.POSTGRES_DATABASE,\n      user: process.env.POSTGRES_USER,\n      password: process.env.POSTGRES_PASSWORD,\n      ssl: { rejectUnauthorized: false },\n      max: 10,\n      min: 1,\n      idleTimeoutMillis: 30000,\n    });\n  }\n  return dbPool;\n}\n\n// Health check\napp.get('/health', (req, res) => {\n  res.json({\n    status: 'healthy',\n    service: 'GRC Backend with Agent Creation',\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Agent creation endpoint - NO MCP server requirement\napp.post('/api/v1/simple-agents/create', async (req, res) => {\n  try {\n    const db = getDatabase();\n    const { tenantId, userId } = req.tenantContext;\n    const {\n      name,\n      description = '',\n      systemPrompt,\n      llmConfigId,\n      enabledMcpServers = [] // Optional - can be empty!\n    } = req.body;\n\n    console.log(`🆕 [Agent Create] Creating \"${name}\" for tenant: ${tenantId}`);\n    console.log(`📝 [Agent Create] MCP servers: ${enabledMcpServers.length} (optional)`);\n\n    if (!name) {\n      return res.status(400).json({\n        success: false,\n        error: 'Agent name is required'\n      });\n    }\n\n    const defaultSystemPrompt = systemPrompt || `You are a helpful AI assistant specialized in GRC tasks. Provide accurate, professional guidance.`;\n\n    // Create agent without MCP server requirement\n    const agentId = 'AGT-' + Date.now();\n    const result = await db.query(`\n      INSERT INTO agents (\n        id, tenant_id, name, description, persona, system_prompt, \n        llm_config_id, enabled_mcp_servers, avatar, color, is_enabled, created_at\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, NOW())\n      RETURNING *\n    `, [\n      agentId, tenantId, name, description, 'helpful_assistant',\n      defaultSystemPrompt, llmConfigId, JSON.stringify(enabledMcpServers),\n      '🤖', '#3B82F6', true\n    ]);\n\n    const agent = result.rows[0];\n    console.log(`✅ [Agent Created] ${agent.name} (ID: ${agent.id})`);\n\n    res.json({\n      success: true,\n      data: {\n        id: agent.id,\n        name: agent.name,\n        description: agent.description,\n        systemPrompt: agent.system_prompt,\n        llmConfigId: agent.llm_config_id,\n        enabledMcpServers: JSON.parse(agent.enabled_mcp_servers || '[]'),\n        isEnabled: agent.is_enabled,\n        createdAt: agent.created_at\n      }\n    });\n\n  } catch (error) {\n    console.error('❌ [Agent Create] Error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to create agent: ' + error.message\n    });\n  }\n});\n\n// Get agents endpoint\napp.get('/api/v1/simple-agents', async (req, res) => {\n  try {\n    const db = getDatabase();\n    const { tenantId } = req.tenantContext;\n    console.log(`🔍 [Agents] Loading for tenant: ${tenantId}`);\n    \n    const result = await db.query('SELECT * FROM agents WHERE tenant_id = $1 ORDER BY created_at DESC', [tenantId]);\n    \n    const agents = result.rows.map(agent => ({\n      id: agent.id,\n      name: agent.name,\n      description: agent.description,\n      systemPrompt: agent.system_prompt,\n      llmConfigId: agent.llm_config_id,\n      enabledMcpServers: JSON.parse(agent.enabled_mcp_servers || '[]'),\n      isEnabled: agent.is_enabled,\n      createdAt: agent.created_at\n    }));\n\n    res.json({\n      success: true,\n      data: { agents, total: agents.length }\n    });\n\n  } catch (error) {\n    console.error('❌ [Agents] Error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to load agents: ' + error.message\n    });\n  }\n});\n\n// LLM configs endpoint\napp.get('/api/v1/simple-llm-configs', async (req, res) => {\n  try {\n    const { tenantId } = req.tenantContext;\n    console.log(`🤖 [LLM] Loading configs for tenant: ${tenantId}`);\n    \n    // Tenant-specific LLM configs\n    let llmConfigs = [];\n    if (tenantId === 'a1b2c3d4-e5f6-4a8b-9c0d-1e2f3a4b5c6d') {\n      // Sarah Chen ACME tenant\n      llmConfigs = [\n        { config_id: 'LLM-ACME-001', name: 'ACME Azure OpenAI', provider: 'azure', model: 'gpt-4', is_enabled: 1 },\n        { config_id: 'LLM-ACME-002', name: 'ACME Claude', provider: 'anthropic', model: 'claude-3', is_enabled: 1 }\n      ];\n    } else if (tenantId === 'f1234567-89ab-4cde-f012-3456789abcde') {\n      // David Smith FinTech tenant\n      llmConfigs = [\n        { config_id: 'LLM-FINT-001', name: 'FinTech OpenAI', provider: 'openai', model: 'gpt-4', is_enabled: 1 },\n        { config_id: 'LLM-FINT-002', name: 'FinTech Azure OpenAI', provider: 'azure', model: 'gpt-4', is_enabled: 1 }\n      ];\n    }\n    \n    res.json({\n      success: true,\n      data: { llm_configs: llmConfigs }\n    });\n  } catch (error) {\n    console.error('❌ [LLM] Error:', error);\n    res.status(500).json({ success: false, error: error.message });\n  }\n});\n\nconst PORT = process.env.PORT || 3005;\napp.listen(PORT, () => {\n  console.log(`🚀 GRC Backend with Agent Creation running on port ${PORT}`);\n});\nEOF\n) && echo 'Using inline server code with agent creation endpoint' && node server.js"]
      resources:
        cpu: 1.0
        memory: 2Gi
    scale:
      minReplicas: 1
      maxReplicas: 5
  configuration:
    ingress:
      external: true
      targetPort: 3005