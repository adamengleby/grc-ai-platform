properties:
  template:
    containers:
    - image: mcr.microsoft.com/azure-functions/node:4-node20-appservice
      name: grc-backend-simple
      env:
      - name: NODE_ENV
        value: production
      - name: PORT
        value: "8080"
      command: ["/bin/sh"]
      args: ["-c", "echo 'const http = require(\"http\"); const url = require(\"url\"); const corsHeaders = { \"Access-Control-Allow-Origin\": \"*\", \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\", \"Access-Control-Allow-Headers\": \"Content-Type, Authorization, x-tenant-id\", \"Content-Type\": \"application/json\" }; const llmConfigs = [{ config_id: \"1\", id: \"1\", name: \"Sydney Azure OpenAI\", provider: \"azure\", model: \"gpt-4\" }]; let agents = []; function handleRequest(req, res) { Object.keys(corsHeaders).forEach(key => res.setHeader(key, corsHeaders[key])); if (req.method === \"OPTIONS\") { res.writeHead(200); res.end(); return; } const parsedUrl = url.parse(req.url, true); const path = parsedUrl.pathname; console.log(req.method + \" \" + path); if (path === \"/health\") { res.writeHead(200); res.end(JSON.stringify({status: \"healthy\", service: \"Container App Node.js\", timestamp: new Date().toISOString()})); return; } if (path === \"/api/v1/simple-llm-configs\") { res.writeHead(200); res.end(JSON.stringify({success: true, data: { llm_configs: llmConfigs }})); return; } if (path === \"/api/v1/simple-agents\") { res.writeHead(200); res.end(JSON.stringify({success: true, data: { agents, total: agents.length }})); return; } if (path === \"/\" || path === \"/api/v1/\") { res.writeHead(200); res.end(JSON.stringify({message: \"GRC Backend - Container App\", endpoints: [\"/health\", \"/api/v1/simple-llm-configs\", \"/api/v1/simple-agents\"]})); return; } res.writeHead(404); res.end(JSON.stringify({success: false, error: \"Endpoint not found\"})); } const server = http.createServer(handleRequest); server.listen(8080, () => console.log(\"Server running on port 8080\"));' > server.js && node server.js"]
      resources:
        cpu: 0.5
        memory: 1Gi
    scale:
      minReplicas: 1
      maxReplicas: 3
  configuration:
    ingress:
      external: true
      targetPort: 8080