properties:
  template:
    containers:
    - image: mcr.microsoft.com/azure-functions/node:4-node20-appservice
      name: grc-backend-simple
      env:
      - name: NODE_ENV
        value: production
      - name: PORT
        value: "3005"
      - name: CORS_ORIGINS
        value: "https://grc-frontend-simple.calmmeadow-5080198e.australiasoutheast.azurecontainerapps.io"

      # PostgreSQL Database Configuration
      - name: POSTGRES_HOST
        value: "grc-postgres-syd.postgres.database.azure.com"
      - name: POSTGRES_PORT
        value: "5432"
      - name: POSTGRES_DATABASE
        value: "grc_platform"
      - name: POSTGRES_USER
        value: "grcadmin"
      - name: POSTGRES_PASSWORD
        value: "GrcP@ssw0rd2024!"

      # Cosmos DB Configuration (existing)
      - name: COSMOS_ENDPOINT
        value: ""
      - name: COSMOS_KEY
        value: ""
      - name: COSMOS_DATABASE_ID
        value: "grc-analytics"

      command: ["/bin/sh"]
      args: ["-c", "echo '🚀 GRC AI Platform Backend with Database Integration' &&

        # Create package.json for the backend
        cat > package.json << 'PACKAGE_EOF'
{
  \"name\": \"grc-backend-production\",
  \"version\": \"1.0.0\",
  \"main\": \"server.js\",
  \"dependencies\": {
    \"express\": \"^4.19.2\",
    \"cors\": \"^2.8.5\",
    \"compression\": \"^1.7.4\",
    \"pg\": \"^8.11.0\",
    \"winston\": \"^3.10.0\"
  },
  \"scripts\": {
    \"start\": \"node server.js\"
  }
}
PACKAGE_EOF

        # Install dependencies
        echo '📦 Installing backend dependencies...' &&
        npm install &&

        # Create backend server
        cat > server.js << 'SERVER_EOF'
const express = require('express');
const cors = require('cors');
const compression = require('compression');
const { Pool } = require('pg');

const app = express();

// Middleware
app.use(compression());
app.use(express.json({ limit: '10mb' }));

// CORS configuration
const corsOptions = {
  origin: process.env.CORS_ORIGINS ? process.env.CORS_ORIGINS.split(',') : ['*'],
  credentials: true,
  optionsSuccessStatus: 200
};
app.use(cors(corsOptions));

// Database connection (will be created on first request)
let dbPool = null;

function getDatabase() {
  if (!dbPool) {
    dbPool = new Pool({
      host: process.env.POSTGRES_HOST,
      port: process.env.POSTGRES_PORT || 5432,
      database: process.env.POSTGRES_DATABASE,
      user: process.env.POSTGRES_USER,
      password: process.env.POSTGRES_PASSWORD,
      ssl: { rejectUnauthorized: false },
      max: 10,
      min: 2,
      idleTimeoutMillis: 30000,
    });

    dbPool.on('error', (err) => {
      console.error('Database pool error:', err);
    });
  }
  return dbPool;
}

// Health check endpoint
app.get('/health', async (req, res) => {
  const healthStatus = {
    status: 'healthy',
    service: 'GRC AI Platform Backend',
    timestamp: new Date().toISOString(),
    environment: 'Azure Container Apps',
    database: {
      type: 'PostgreSQL',
      host: process.env.POSTGRES_HOST,
      connected: false
    }
  };

  // Test database connection
  try {
    const db = getDatabase();
    const result = await db.query('SELECT 1 as health_check');
    healthStatus.database.connected = true;
    healthStatus.database.result = result.rows[0];
  } catch (error) {
    healthStatus.database.connected = false;
    healthStatus.database.error = error.message;
  }

  res.json(healthStatus);
});

// API Routes
app.get('/api/v1/simple-agents', async (req, res) => {
  try {
    res.json({
      success: true,
      data: {
        agents: [],
        total: 0,
        message: 'Database integration ready - agents will be loaded from PostgreSQL'
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

app.get('/api/v1/simple-llm-configs', async (req, res) => {
  try {
    // Try to fetch from database, fallback to default
    let configs = [];
    try {
      const db = getDatabase();
      const result = await db.query('SELECT * FROM llm_configs ORDER BY created_at DESC');
      configs = result.rows.map(row => ({
        config_id: row.id,
        id: row.id,
        name: row.name,
        provider: row.provider,
        model: row.model
      }));
    } catch (dbError) {
      console.warn('Database not ready, using default config:', dbError.message);
      configs = [{
        config_id: '1',
        id: '1',
        name: 'Azure PostgreSQL Ready',
        provider: 'azure',
        model: 'database-integrated'
      }];
    }

    res.json({
      success: true,
      data: {
        llm_configs: configs
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

app.get('/api/v1/database/status', async (req, res) => {
  try {
    const db = getDatabase();

    // Get table information
    const tables = await db.query(`
      SELECT table_name, table_type
      FROM information_schema.tables
      WHERE table_schema = 'public'
      ORDER BY table_name
    `);

    const status = {
      connected: true,
      host: process.env.POSTGRES_HOST,
      database: process.env.POSTGRES_DATABASE,
      tables: tables.rows,
      tableCount: tables.rows.length,
      timestamp: new Date().toISOString()
    };

    res.json({ success: true, data: status });
  } catch (error) {
    res.json({
      success: false,
      error: error.message,
      connected: false
    });
  }
});

// Error handling middleware
app.use((error, req, res, next) => {
  console.error('Server error:', error);
  res.status(500).json({
    success: false,
    error: 'Internal Server Error',
    timestamp: new Date().toISOString()
  });
});

const port = process.env.PORT || 3005;
app.listen(port, () => {
  console.log('🚀 GRC AI Platform Backend with Database Integration');
  console.log('📍 Port:', port);
  console.log('🗄️  Database:', process.env.POSTGRES_HOST);
  console.log('🌐 CORS Origins:', process.env.CORS_ORIGINS);
  console.log('✅ Backend ready with PostgreSQL integration');
});
SERVER_EOF

        echo '✅ Backend setup complete' &&
        echo '🚀 Starting backend server...' &&
        node server.js"]
      resources:
        cpu: 1.0
        memory: 2Gi
    scale:
      minReplicas: 1
      maxReplicas: 5
  configuration:
    ingress:
      external: true
      targetPort: 3005
      allowInsecure: false