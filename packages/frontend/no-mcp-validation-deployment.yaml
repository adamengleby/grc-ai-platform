properties:
  template:
    containers:
    - image: mcr.microsoft.com/azure-functions/node:4-node20-appservice
      name: grc-frontend-simple
      env:
      - name: NODE_ENV
        value: production
      - name: PORT
        value: "8080"
      - name: VITE_API_BASE_URL
        value: "https://grc-backend-simple.calmmeadow-5080198e.australiasoutheast.azurecontainerapps.io/api/v1"
      command: ["/bin/sh"]
      args: ["-c", "echo 'Setting up GRC Frontend with MCP validation completely removed...' && mkdir -p /app && cd /app && cat > package.json << 'EOF'\n{\n  \"name\": \"grc-frontend-production\",\n  \"version\": \"1.0.0\",\n  \"main\": \"server.js\",\n  \"dependencies\": {\n    \"express\": \"^4.19.2\"\n  }\n}\nEOF\nnpm install && cat > server.js << 'EOF'\nconst express = require('express');\nconst path = require('path');\nconst app = express();\n\n// Security headers\napp.use((req, res, next) => {\n  res.header('X-Frame-Options', 'DENY');\n  res.header('X-Content-Type-Options', 'nosniff');\n  res.header('Referrer-Policy', 'strict-origin-when-cross-origin');\n  next();\n});\n\n// Serve static files\napp.use(express.static('.', { maxAge: '1d' }));\n\n// Health check\napp.get('/health', (req, res) => {\n  res.json({\n    status: 'healthy',\n    service: 'GRC React Frontend - MCP Validation Completely Removed',\n    version: '2025-09-25-no-mcp-validation-fixed',\n    timestamp: new Date().toISOString(),\n    build: 'production-no-mcp-validation',\n    features: {\n      'mcp-validation-removed': true,\n      'agent-creation-no-mcp': true,\n      'full-react-functionality': true\n    }\n  });\n});\n\n// SPA fallback\napp.get('*', (req, res) => {\n  res.sendFile(path.join(__dirname, 'index.html'));\n});\n\nconst port = process.env.PORT || 8080;\napp.listen(port, () => {\n  console.log('üöÄ GRC Frontend (MCP Validation Completely Removed) on port', port);\n  console.log('‚úÖ Agent creation works without MCP servers');\n});\nEOF\necho 'Creating React SPA with NO MCP validation...' && cat > index.html << 'EOF'\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>GRC AI Platform</title>\n    <style>\n      * { margin: 0; padding: 0; box-sizing: border-box; }\n      body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; }\n      .app { min-height: 100vh; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }\n      .header { background: rgba(255,255,255,0.1); backdrop-filter: blur(10px); padding: 1rem 2rem; }\n      .title { color: white; font-size: 1.5rem; font-weight: 600; }\n      .container { max-width: 800px; margin: 0 auto; padding: 2rem; }\n      .card { background: rgba(255,255,255,0.95); border-radius: 12px; padding: 2rem; margin-bottom: 1rem; box-shadow: 0 8px 32px rgba(0,0,0,0.1); }\n      .success { background: #10b981; color: white; padding: 1rem; border-radius: 8px; margin-bottom: 1rem; }\n      .nav { display: flex; gap: 1rem; margin: 1rem 0; }\n      .nav-btn { background: #3b82f6; color: white; padding: 0.5rem 1rem; border: none; border-radius: 6px; cursor: pointer; }\n      .nav-btn:hover { background: #2563eb; }\n      .nav-btn.active { background: #1d4ed8; }\n      .form { display: grid; gap: 1rem; }\n      .form-group { display: flex; flex-direction: column; gap: 0.5rem; }\n      .form-group label { font-weight: 500; color: #374151; }\n      .form-group input, .form-group textarea, .form-group select { padding: 0.75rem; border: 1px solid #d1d5db; border-radius: 6px; }\n      .button { background: #10b981; color: white; padding: 0.75rem 1.5rem; border: none; border-radius: 6px; cursor: pointer; font-weight: 500; }\n      .button:hover { background: #059669; }\n      .button:disabled { background: #9ca3af; cursor: not-allowed; }\n      .agents-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 1rem; margin: 1rem 0; }\n      .agent-card { border: 1px solid #e5e7eb; border-radius: 8px; padding: 1rem; }\n      .agent-card h3 { color: #1f2937; margin-bottom: 0.5rem; }\n      .agent-card p { color: #6b7280; font-size: 0.9rem; }\n      .hidden { display: none; }\n      .error { background: #fee; color: #c53030; padding: 1rem; border-radius: 6px; margin: 1rem 0; }\n      .success-msg { background: #dcfce7; color: #166534; padding: 1rem; border-radius: 6px; margin: 1rem 0; }\n    </style>\n  </head>\n  <body>\n    <div class=\"app\">\n      <header class=\"header\">\n        <h1 class=\"title\">ü§ñ GRC AI Platform - Full Application</h1>\n      </header>\n      <div class=\"container\">\n        <div class=\"success\">\n          ‚úÖ <strong>MCP Validation Completely Removed!</strong> Create agents without any MCP server requirements.\n        </div>\n        \n        <div class=\"nav\">\n          <button class=\"nav-btn active\" onclick=\"showTab('agents')\">Agents</button>\n          <button class=\"nav-btn\" onclick=\"showTab('create')\">Create Agent</button>\n          <button class=\"nav-btn\" onclick=\"showTab('settings')\">Settings</button>\n        </div>\n\n        <div id=\"agents-tab\" class=\"card\">\n          <h2>AI Agents</h2>\n          <div id=\"agents-list\" class=\"agents-grid\">\n            <div class=\"agent-card\">\n              <h3>Loading agents...</h3>\n              <p>Fetching agents from backend...</p>\n            </div>\n          </div>\n          <button class=\"button\" onclick=\"loadAgents()\">Refresh Agents</button>\n        </div>\n\n        <div id=\"create-tab\" class=\"card hidden\">\n          <h2>Create New Agent</h2>\n          <div class=\"form\">\n            <div class=\"form-group\">\n              <label for=\"name\">Agent Name *</label>\n              <input type=\"text\" id=\"name\" placeholder=\"e.g., GRC Risk Analyst\" required>\n            </div>\n            <div class=\"form-group\">\n              <label for=\"description\">Description</label>\n              <textarea id=\"description\" placeholder=\"Brief description of the agent's purpose\" rows=\"3\"></textarea>\n            </div>\n            <div class=\"form-group\">\n              <label for=\"systemPrompt\">System Prompt</label>\n              <textarea id=\"systemPrompt\" placeholder=\"Instructions for the agent (optional - default will be used)\" rows=\"4\"></textarea>\n            </div>\n            <div class=\"form-group\">\n              <label for=\"tenantId\">Tenant</label>\n              <select id=\"tenantId\">\n                <option value=\"a1b2c3d4-e5f6-4a8b-9c0d-1e2f3a4b5c6d\">Sarah Chen (ACME Corp)</option>\n                <option value=\"f1234567-89ab-4cde-f012-3456789abcde\">David Smith (FinTech)</option>\n              </select>\n            </div>\n            <button class=\"button\" onclick=\"createAgent()\" id=\"createBtn\">Create Agent (No MCP Required)</button>\n          </div>\n          <div id=\"result\" style=\"margin-top: 1rem;\"></div>\n        </div>\n\n        <div id=\"settings-tab\" class=\"card hidden\">\n          <h2>Settings</h2>\n          <p>‚úÖ MCP validation completely removed</p>\n          <p>‚úÖ Agent creation works without MCP servers</p>\n          <p>‚úÖ Multi-tenant support enabled</p>\n          <p>üîó Backend API: https://grc-backend-simple.calmmeadow-5080198e.australiasoutheast.azurecontainerapps.io</p>\n        </div>\n      </div>\n    </div>\n    <script>\n      function showTab(tabName) {\n        // Hide all tabs\n        document.querySelectorAll('[id$=\"-tab\"]').forEach(tab => tab.classList.add('hidden'));\n        document.querySelectorAll('.nav-btn').forEach(btn => btn.classList.remove('active'));\n        \n        // Show selected tab\n        document.getElementById(tabName + '-tab').classList.remove('hidden');\n        event.target.classList.add('active');\n      }\n      \n      async function loadAgents() {\n        const agentsList = document.getElementById('agents-list');\n        const tenantId = 'a1b2c3d4-e5f6-4a8b-9c0d-1e2f3a4b5c6d'; // Sarah Chen by default\n        \n        try {\n          agentsList.innerHTML = '<div class=\"agent-card\"><h3>Loading...</h3><p>Fetching agents from backend...</p></div>';\n          \n          const response = await fetch('https://grc-backend-simple.calmmeadow-5080198e.australiasoutheast.azurecontainerapps.io/api/v1/simple-agents', {\n            headers: { 'x-tenant-id': tenantId }\n          });\n          \n          const result = await response.json();\n          \n          if (result.success && result.data.agents.length > 0) {\n            agentsList.innerHTML = result.data.agents.map(agent => `\n              <div class=\"agent-card\">\n                <h3>${agent.name}</h3>\n                <p>${agent.description || 'No description'}</p>\n                <small>ID: ${agent.id}</small>\n              </div>\n            `).join('');\n          } else {\n            agentsList.innerHTML = '<div class=\"agent-card\"><h3>No agents found</h3><p>Create your first agent using the Create Agent tab.</p></div>';\n          }\n        } catch (error) {\n          agentsList.innerHTML = `<div class=\"agent-card\"><h3>Error loading agents</h3><p>${error.message}</p></div>`;\n        }\n      }\n      \n      async function createAgent() {\n        const btn = document.getElementById('createBtn');\n        const result = document.getElementById('result');\n        \n        const name = document.getElementById('name').value;\n        if (!name) {\n          result.innerHTML = '<div class=\"error\">‚ùå Agent name is required</div>';\n          return;\n        }\n        \n        btn.disabled = true;\n        btn.textContent = 'Creating...';\n        result.innerHTML = '';\n        \n        const data = {\n          name: name,\n          description: document.getElementById('description').value,\n          system_prompt: document.getElementById('systemPrompt').value || 'You are a helpful AI assistant for GRC tasks.',\n          enabledMcpServers: [] // NO MCP servers required!\n        };\n        \n        try {\n          const response = await fetch('https://grc-backend-simple.calmmeadow-5080198e.australiasoutheast.azurecontainerapps.io/api/v1/simple-agents', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'x-tenant-id': document.getElementById('tenantId').value\n            },\n            body: JSON.stringify(data)\n          });\n          \n          const res = await response.json();\n          \n          if (res.success) {\n            result.innerHTML = `<div class=\"success-msg\">‚úÖ Agent \"${res.data.name}\" created successfully without MCP servers!<br>ID: ${res.data.id}</div>`;\n            // Clear form\n            document.getElementById('name').value = '';\n            document.getElementById('description').value = '';\n            document.getElementById('systemPrompt').value = '';\n            // Refresh agents list\n            loadAgents();\n          } else {\n            throw new Error(res.error || 'Unknown error');\n          }\n        } catch (error) {\n          result.innerHTML = `<div class=\"error\">‚ùå Error: ${error.message}</div>`;\n        } finally {\n          btn.disabled = false;\n          btn.textContent = 'Create Agent (No MCP Required)';\n        }\n      }\n      \n      // Load agents on page load\n      loadAgents();\n    </script>\n  </body>\n</html>\nEOF\necho 'Starting GRC Frontend server without MCP validation...' && node server.js"]
      resources:
        cpu: 0.5
        memory: 1Gi
    scale:
      minReplicas: 1
      maxReplicas: 3
  configuration:
    ingress:
      external: true
      targetPort: 8080