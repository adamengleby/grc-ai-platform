properties:
  template:
    containers:
    - image: mcr.microsoft.com/azure-functions/node:4-node20-appservice
      name: grc-frontend-simple
      env:
      - name: NODE_ENV
        value: production
      - name: PORT
        value: "8080"
      - name: VITE_API_BASE_URL
        value: "https://grc-backend-simple.calmmeadow-5080198e.australiasoutheast.azurecontainerapps.io/api/v1"
      - name: BUILD_VERSION
        value: "llm-config-fix-20250928"
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -e
          echo "🚀 Building GRC React Frontend with LLM Config Field Mapping Fix..."

          # Install required tools
          apt-get update -qq
          apt-get install -y git curl

          # Clone repository
          echo "📥 Cloning repository..."
          git clone https://github.com/adamengleby/grc-ai-platform.git /tmp/repo
          cd /tmp/repo/packages/frontend

          echo "📁 Frontend directory structure:"
          ls -la

          echo "📦 Installing ALL dependencies (including dev dependencies)..."
          NODE_ENV=development npm install

          echo "🔧 Building React application with LLM config field mapping fix..."
          VITE_API_BASE_URL="https://grc-backend-simple.calmmeadow-5080198e.australiasoutheast.azurecontainerapps.io/api/v1" npm run build

          echo "✅ Build completed. Checking output..."
          ls -la dist/

          # Set up production app
          echo "🚚 Setting up production server..."
          mkdir -p /app
          cp -r dist/* /app/
          cd /app

          echo "📄 Production files:"
          ls -la

          # Create package.json
          cat > package.json << 'PACKAGE_EOF'
          {
            "name": "grc-frontend-production",
            "version": "1.0.0",
            "main": "server.js",
            "dependencies": {
              "express": "^4.19.2"
            }
          }
          PACKAGE_EOF

          npm install

          # Create Express server
          cat > server.js << 'SERVER_EOF'
          const express = require('express');
          const path = require('path');
          const app = express();

          // Security headers
          app.use((req, res, next) => {
            res.header('X-Frame-Options', 'DENY');
            res.header('X-Content-Type-Options', 'nosniff');
            res.header('Referrer-Policy', 'strict-origin-when-cross-origin');
            res.header('X-XSS-Protection', '1; mode=block');
            next();
          });

          // Serve static files
          app.use(express.static('.', {
            maxAge: process.env.NODE_ENV === 'production' ? '1d' : 0,
            etag: true,
            lastModified: true
          }));

          // Health check
          app.get('/health', (req, res) => {
            res.json({
              status: 'healthy',
              service: 'GRC React Frontend - LLM Config Field Mapping Fix',
              version: '2025-09-28-llm-config-fix',
              timestamp: new Date().toISOString(),
              build: 'production-react-llm-config-field-fix',
              features: {
                'actual-react-app': true,
                'mcp-validation-removed': true,
                'agent-field-mapping-fix': true,
                'llm-config-field-mapping-fix': true,
                'production-build': true
              }
            });
          });

          // API health proxy
          app.get('/api/health', async (req, res) => {
            try {
              const fetch = await import('node-fetch').then(m => m.default || m);
              const response = await fetch('https://grc-backend-simple.calmmeadow-5080198e.australiasoutheast.azurecontainerapps.io/health');
              const data = await response.json();
              res.json({ frontend: 'healthy', backend: data });
            } catch (error) {
              res.status(500).json({ frontend: 'healthy', backend: 'error', error: error.message });
            }
          });

          // SPA fallback
          app.get('*', (req, res) => {
            res.sendFile(path.join(__dirname, 'index.html'));
          });

          const port = process.env.PORT || 8080;
          app.listen(port, () => {
            console.log('🚀 GRC React Frontend (LLM Config Field Mapping Fix) on port', port);
            console.log('🔗 API Base URL:', process.env.VITE_API_BASE_URL);
            console.log('✅ LLM config field mapping fix deployed');
            console.log('🎯 Features: llmConfigId <-> llm_config_id mapping, agent activation fix');
          });
          SERVER_EOF

          echo "🧹 Cleaning up build artifacts..."
          rm -rf /tmp/repo

          echo "🎉 Starting React frontend with LLM config fixes..."
          node server.js
      resources:
        cpu: 1.25
        memory: 2.5Gi
    scale:
      minReplicas: 1
      maxReplicas: 3
  configuration:
    ingress:
      external: true
      targetPort: 8080