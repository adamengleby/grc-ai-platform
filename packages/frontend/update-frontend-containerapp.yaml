properties:
  template:
    containers:
    - image: mcr.microsoft.com/azure-functions/node:4-node20-appservice
      name: grc-frontend-simple
      env:
      - name: NODE_ENV
        value: production
      - name: PORT
        value: "8080"
      command: ["/bin/sh"]
      args: ["-c", "cat > package.json << 'EOF'\n{\n  \"name\": \"grc-frontend\",\n  \"version\": \"1.0.0\",\n  \"main\": \"server.js\",\n  \"dependencies\": {\n    \"express\": \"^4.19.2\"\n  },\n  \"scripts\": {\n    \"start\": \"node server.js\"\n  }\n}\nEOF\ncat > server.js << 'EOF'\nconst express = require('express');\nconst path = require('path');\nconst app = express();\napp.get('/', (req, res) => {\n  res.send(`\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>GRC AI Platform - Azure</title>\n  <style>\n    * { margin: 0; padding: 0; box-sizing: border-box; }\n    body { \n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; \n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); \n      min-height: 100vh; \n      color: white; \n      padding: 20px;\n    }\n    .container { max-width: 1200px; margin: 0 auto; }\n    .header { text-align: center; padding: 40px 0; }\n    .card { \n      background: rgba(255,255,255,0.1); \n      backdrop-filter: blur(10px); \n      border-radius: 15px; \n      padding: 30px; \n      margin: 20px 0; \n      border: 1px solid rgba(255,255,255,0.2);\n    }\n    h1 { font-size: 2.5rem; margin-bottom: 10px; }\n    .status-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }\n    .status-item { background: rgba(0,0,0,0.2); padding: 20px; border-radius: 10px; }\n    .success { border-left: 4px solid #4ade80; }\n    .info { border-left: 4px solid #60a5fa; }\n    .endpoint { \n      background: rgba(0,0,0,0.3); \n      padding: 15px; \n      border-radius: 8px; \n      margin: 10px 0; \n      font-family: monospace; \n      font-size: 0.9rem;\n    }\n    .test-btn { \n      display: inline-block; \n      padding: 10px 20px; \n      background: #4ade80; \n      color: #000; \n      text-decoration: none; \n      border-radius: 6px; \n      margin: 5px; \n      font-weight: 600;\n      transition: background 0.3s;\n    }\n    .test-btn:hover { background: #22c55e; }\n    .architecture-item { \n      display: flex; \n      align-items: center; \n      padding: 10px 0; \n      border-bottom: 1px solid rgba(255,255,255,0.1);\n    }\n    .icon { margin-right: 10px; font-size: 1.2rem; }\n    #connection-status { \n      padding: 20px; \n      border-radius: 10px; \n      margin-top: 20px;\n    }\n    .loading { background: rgba(255,193,7,0.2); border-left: 4px solid #ffc107; }\n    .connected { background: rgba(76,175,80,0.2); border-left: 4px solid #4caf50; }\n    .error { background: rgba(244,67,54,0.2); border-left: 4px solid #f44336; }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"header\">\n      <h1>🚀 GRC AI Platform</h1>\n      <p style=\"font-size: 1.2rem; opacity: 0.9;\">Enterprise AI-Powered Governance, Risk & Compliance</p>\n    </div>\n    \n    <div class=\"status-grid\">\n      <div class=\"card status-item success\">\n        <div class=\"icon\">✅</div>\n        <strong>Frontend Status</strong><br>\n        <small>Azure Container Apps (Australia Southeast)</small>\n      </div>\n      <div class=\"card status-item success\">\n        <div class=\"icon\">✅</div>\n        <strong>Backend Status</strong><br>\n        <small>Azure Container Apps (Australia Southeast)</small>\n      </div>\n      <div class=\"card status-item info\">\n        <div class=\"icon\">📍</div>\n        <strong>Data Sovereignty</strong><br>\n        <small>Fully compliant - Australian hosting</small>\n      </div>\n      <div class=\"card status-item info\">\n        <div class=\"icon\">🔒</div>\n        <strong>Security</strong><br>\n        <small>HTTPS, CORS, Auto-scaling enabled</small>\n      </div>\n    </div>\n    \n    <div class=\"card\">\n      <h3>🔗 API Configuration</h3>\n      <div class=\"endpoint\">Backend URL: https://grc-backend-simple.calmmeadow-5080198e.australiasoutheast.azurecontainerapps.io</div>\n      <div class=\"endpoint\">Health Check: /health</div>\n      <div class=\"endpoint\">LLM Configs: /api/v1/simple-llm-configs</div>\n      <div class=\"endpoint\">AI Agents: /api/v1/simple-agents</div>\n      <div class=\"endpoint\">Database Test: /api/v1/simple-agents/test-database</div>\n    </div>\n    \n    <div class=\"card\">\n      <h3>🧪 Live API Testing</h3>\n      <a href=\"https://grc-backend-simple.calmmeadow-5080198e.australiasoutheast.azurecontainerapps.io/health\" target=\"_blank\" class=\"test-btn\">Health Check</a>\n      <a href=\"https://grc-backend-simple.calmmeadow-5080198e.australiasoutheast.azurecontainerapps.io/api/v1/simple-llm-configs\" target=\"_blank\" class=\"test-btn\">LLM Configs</a>\n      <a href=\"https://grc-backend-simple.calmmeadow-5080198e.australiasoutheast.azurecontainerapps.io/api/v1/simple-agents\" target=\"_blank\" class=\"test-btn\">AI Agents</a>\n      <a href=\"https://grc-backend-simple.calmmeadow-5080198e.australiasoutheast.azurecontainerapps.io/api/v1/simple-agents/test-database\" target=\"_blank\" class=\"test-btn\">DB Test</a>\n    </div>\n    \n    <div class=\"card\">\n      <h3>🏗️ Architecture</h3>\n      <div class=\"architecture-item\">\n        <span class=\"icon\">⚡</span>\n        <span>Azure Container Apps Environment (Australia Southeast)</span>\n      </div>\n      <div class=\"architecture-item\">\n        <span class=\"icon\">🟢</span>\n        <span>Node.js 20 Runtime with Express Framework</span>\n      </div>\n      <div class=\"architecture-item\">\n        <span class=\"icon\">🔄</span>\n        <span>Auto-scaling (1-3 replicas based on demand)</span>\n      </div>\n      <div class=\"architecture-item\">\n        <span class=\"icon\">🌐</span>\n        <span>CORS enabled for cross-origin API requests</span>\n      </div>\n      <div class=\"architecture-item\">\n        <span class=\"icon\">🔐</span>\n        <span>HTTPS with Azure-managed SSL certificates</span>\n      </div>\n    </div>\n    \n    <div id=\"connection-status\" class=\"loading\">\n      <h4>🔄 Testing Backend Connection...</h4>\n      <p>Connecting to Azure Container Apps backend...</p>\n    </div>\n  </div>\n  \n  <script>\n    console.log('🇦🇺 GRC AI Platform - Australia Southeast');\n    \n    const statusDiv = document.getElementById('connection-status');\n    const backendUrl = 'https://grc-backend-simple.calmmeadow-5080198e.australiasoutheast.azurecontainerapps.io';\n    \n    // Test backend connectivity\n    Promise.all([\n      fetch(backendUrl + '/health').then(r => r.json()),\n      fetch(backendUrl + '/api/v1/simple-llm-configs').then(r => r.json()),\n      fetch(backendUrl + '/api/v1/simple-agents').then(r => r.json())\n    ])\n    .then(results => {\n      console.log('✅ Backend Tests Passed:', results);\n      statusDiv.className = 'connected';\n      statusDiv.innerHTML = \\`\n        <h4>✅ Backend Connection Successful</h4>\n        <p><strong>Health:</strong> \\${results[0].status} (\\${results[0].service})</p>\n        <p><strong>LLM Configs:</strong> \\${results[1].data.llm_configs.length} available</p>\n        <p><strong>AI Agents:</strong> \\${results[2].data.total} configured</p>\n        <p><strong>Database:</strong> \\${results[2].data.database_type} storage active</p>\n      \\`;\n    })\n    .catch(error => {\n      console.error('❌ Backend Connection Failed:', error);\n      statusDiv.className = 'error';\n      statusDiv.innerHTML = \\`\n        <h4>❌ Backend Connection Failed</h4>\n        <p>Unable to connect to Azure Container Apps backend</p>\n        <p><small>Error: \\${error.message}</small></p>\n      \\`;\n    });\n  </script>\n</body>\n</html>\n  `);\n});\nconst port = process.env.PORT || 8080;\napp.listen(port, () => {\n  console.log('GRC Frontend running on port ' + port);\n});\nEOF\nnpm install && node server.js"]
      resources:
        cpu: 0.5
        memory: 1Gi
    scale:
      minReplicas: 1
      maxReplicas: 3
  configuration:
    ingress:
      external: true
      targetPort: 8080