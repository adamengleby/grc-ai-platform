properties:
  template:
    containers:
    - image: mcr.microsoft.com/azure-functions/node:4-node20-appservice
      name: grc-frontend-simple
      env:
      - name: NODE_ENV
        value: production
      - name: PORT
        value: "8080"
      - name: VITE_API_BASE_URL
        value: "https://grc-backend-simple.calmmeadow-5080198e.australiasoutheast.azurecontainerapps.io/api/v1"
      command: ["/bin/sh"]
      args: ["-c", "echo 'Deploying GRC Frontend with MCP validation removed...' && cat > package.json << 'EOF'\n{\n  \"name\": \"grc-frontend\",\n  \"version\": \"1.0.0\",\n  \"main\": \"server.js\",\n  \"dependencies\": {\n    \"express\": \"^4.19.2\"\n  }\n}\nEOF\necho 'Installing dependencies...' && npm install && echo 'Creating optimized Express server...' && cat > server.js << 'EOF'\nconst express = require('express');\nconst path = require('path');\nconst app = express();\n\n// Serve static files\napp.use(express.static('.', { maxAge: '1d' }));\n\n// Health check\napp.get('/health', (req, res) => {\n  res.json({\n    status: 'healthy',\n    service: 'GRC React Frontend - MCP Validation Removed',\n    version: '2025-09-25-no-mcp-validation',\n    timestamp: new Date().toISOString(),\n    build: 'production'\n  });\n});\n\n// SPA fallback - serve index.html for all routes\napp.get('*', (req, res) => {\n  res.sendFile(path.join(__dirname, 'index.html'));\n});\n\nconst port = process.env.PORT || 8080;\napp.listen(port, () => {\n  console.log('ðŸš€ GRC Frontend (No MCP Validation) running on port', port);\n  console.log('ðŸ”— API Base URL:', process.env.VITE_API_BASE_URL);\n  console.log('âœ… MCP validation removed - agents can be created without MCP servers');\n});\nEOF\necho 'Downloading latest React build without MCP validation...' && curl -L -s -o react-build.tar.gz 'https://api.github.com/repos/adamengleby/grc-ai-platform/tarball/master' && tar -xzf react-build.tar.gz --strip-components=3 '*/packages/frontend/dist' && rm react-build.tar.gz && echo 'React build deployed - starting server...' && node server.js"]
      resources:
        cpu: 0.75
        memory: 1.5Gi
    scale:
      minReplicas: 1
      maxReplicas: 5
  configuration:
    ingress:
      external: true
      targetPort: 8080