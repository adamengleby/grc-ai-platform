location: australiasoutheast
name: grc-backend-simple
resourceGroup: rg-grc-ai-platform-syd
type: Microsoft.App/containerApps
properties:
  environmentId: /subscriptions/2e6b5431-6d83-4072-8ccc-86af69cf22b0/resourceGroups/rg-grc-ai-platform-syd/providers/Microsoft.App/managedEnvironments/grc-containerapp-env
  configuration:
    ingress:
      external: true
      targetPort: 8080
  template:
    containers:
    - name: grc-backend-simple
      image: mcr.microsoft.com/azure-functions/node:4-node20-appservice
      resources:
        cpu: 1.0
        memory: 2Gi
        ephemeralStorage: 4Gi
      env:
      - name: NODE_ENV
        value: "production"
      - name: PORT
        value: "8080"
      - name: POSTGRES_HOST
        value: "grc-postgres-syd.postgres.database.azure.com"
      - name: POSTGRES_DATABASE
        value: "grc_platform"
      - name: POSTGRES_USER
        value: "grcadmin"
      - name: POSTGRES_PASSWORD
        value: "GRC2024!Secure"
      - name: CORS_ORIGINS
        value: "https://grc-frontend-simple.calmmeadow-5080198e.australiasoutheast.azurecontainerapps.io,http://localhost:5173,*"
      command:
      - /bin/bash
      args:
      - -c
      - |
        set -e
        echo "🚀 GRC Backend v1.1.0 - TENANT FIX (client-side data loading)..."

        # Install required tools
        apt-get update -qq
        apt-get install -y git curl

        # Clone latest code
        echo "📥 Cloning latest backend code..."
        rm -rf /tmp/repo 2>/dev/null || true
        git clone --depth 1 https://github.com/adamengleby/grc-ai-platform.git /tmp/repo
        cd /tmp/repo

        echo "📋 Latest commit:"
        git log -1 --oneline

        # Set up production server
        echo "🚚 Setting up production backend with tenant fix..."
        mkdir -p /app
        cd /app

        # Copy the server file
        cp /tmp/repo/packages/backend/containerapp-server-v7.js server.js

        # Create production package.json
        cat > package.json << 'EOF'
        {
          "name": "grc-backend-simple",
          "version": "1.1.0",
          "main": "server.js",
          "dependencies": {
            "express": "^4.19.2",
            "cors": "^2.8.5",
            "pg": "^8.11.0"
          }
        }
        EOF

        echo "📦 Installing dependencies..."
        npm install

        echo "🔧 Adding tenant initialization and data loading fix..."
        # Update server.js to initialize missing tenant
        cat > tenant-fix-patch.js << 'EOF'
        const fs = require('fs');
        let serverCode = fs.readFileSync('server.js', 'utf8');

        // Add tenant initialization function
        const tenantInitCode = `
        // Initialize default tenant if missing
        async function initializeDefaultTenant() {
          try {
            const db = getDatabase();
            const tenantId = '123e4567-e89b-12d3-a456-426614174000';

            // Check if tenant exists
            const existingTenant = await db.query('SELECT id FROM tenants WHERE id = $1', [tenantId]);

            if (existingTenant.rows.length === 0) {
              console.log('🔧 Creating missing default tenant...');

              // Insert default tenant
              await db.query(\\`
                INSERT INTO tenants (id, name, domain, subscription_tier, is_active, created_at, updated_at)
                VALUES ($1, 'Default Tenant', 'default.local', 'enterprise', true, NOW(), NOW())
              \\`, [tenantId]);

              console.log('✅ Default tenant created successfully');
            } else {
              console.log('✅ Default tenant already exists');
            }
          } catch (error) {
            console.error('❌ Failed to initialize default tenant:', error.message);
          }
        }
        `;

        // Add startup initialization after database connection
        const startupInit = `
        // Initialize on startup
        app.listen(PORT, async () => {
          console.log(\\`🚀 GRC Backend listening on port \\${PORT}\\`);
          console.log('🔗 Database Host:', process.env.POSTGRES_HOST);
          console.log('📊 CORS Origins:', process.env.CORS_ORIGINS);

          // Initialize default tenant for client-side data loading
          await initializeDefaultTenant();

          console.log('✅ Server ready - tenant initialization complete');
        });`;

        // Replace the existing app.listen
        serverCode = serverCode.replace(
          /app\.listen\(PORT[^}]*\}\);/,
          startupInit
        );

        // Add the tenant init function before app.listen
        serverCode = serverCode.replace(
          /app\.listen\(PORT/,
          tenantInitCode + '\\n\\napp.listen(PORT'
        );

        // Update health endpoint to show tenant status
        const healthEndpointPatch = `
        // Health check endpoint with tenant status
        app.get('/health', async (req, res) => {
          res.header('Access-Control-Allow-Origin', '*');
          res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
          res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization, x-tenant-id, x-user-id');

          const currentTime = new Date();
          const healthStatus = {
            status: 'healthy',
            service: 'GRC Platform Backend - Tenant Fix',
            version: \\`v1.1.0-tenant-fix-\\${currentTime.toISOString().split('T')[0]} \\${currentTime.toISOString().split('T')[1].split('.')[0]}\\`,
            timestamp: currentTime.toISOString(),
            environment: 'Azure Container Apps',
            corsEnabled: true,
            allowedOrigins: process.env.CORS_ORIGINS || '*',
            deployment: {
              containerName: 'grc-backend-simple',
              version: 'v1.1.0-tenant-fix',
              buildTime: currentTime.toISOString(),
              fixes: [
                'Default tenant initialization (123e4567-e89b-12d3-a456-426614174000)',
                'Client-side data loading fixed',
                'Foreign key constraint resolution',
                'Frontend API URL corrected (port 8080)'
              ]
            },
            database: {
              type: 'PostgreSQL',
              host: process.env.POSTGRES_HOST,
              user: process.env.POSTGRES_USER,
              database: process.env.POSTGRES_DATABASE,
              connected: false,
              defaultTenantExists: false
            }
          };

          // Test database connection and tenant
          try {
            const db = getDatabase();
            const result = await db.query('SELECT 1 as health_check, version()');
            healthStatus.database.connected = true;
            healthStatus.database.result = result.rows[0];

            // Check default tenant
            const tenantCheck = await db.query('SELECT id FROM tenants WHERE id = $1', ['123e4567-e89b-12d3-a456-426614174000']);
            healthStatus.database.defaultTenantExists = tenantCheck.rows.length > 0;
            healthStatus.database.defaultTenantId = '123e4567-e89b-12d3-a456-426614174000';

          } catch (error) {
            healthStatus.database.connected = false;
            healthStatus.database.error = error.message;
          }

          res.json(healthStatus);
        });`;

        // Replace the existing health endpoint
        serverCode = serverCode.replace(
          /\\/\\/ Health check endpoint[\\s\\S]*?res\\.json\\(healthStatus\\);\\s*\\}\\);/,
          healthEndpointPatch
        );

        fs.writeFileSync('server.js', serverCode);
        console.log('✅ Tenant fix and initialization patch applied');
        EOF

        node tenant-fix-patch.js

        echo "🧹 Cleaning up..."
        rm -rf /tmp/repo tenant-fix-patch.js

        echo "🎉 Starting GRC Backend v1.1.0 with Tenant Fix..."
        echo "🔗 Database Host: $POSTGRES_HOST"
        echo "🔗 Database User: $POSTGRES_USER"
        echo "🔗 Database Name: $POSTGRES_DATABASE"
        echo "🔗 CORS Origins: $CORS_ORIGINS"
        echo "📊 Version: Backend v1.1.0-tenant-fix-$(date +'%Y-%m-%d %H:%M:%S')"
        echo "🏷️  Tenant Fix Features:"
        echo "    ✅ Auto-initialize default tenant (123e4567-e89b-12d3-a456-426614174000)"
        echo "    ✅ Fix client-side data loading issues"
        echo "    ✅ Resolve foreign key constraint errors"
        echo "    ✅ Enable agents and LLM configs to show in frontend"
        node server.js
    scale:
      minReplicas: 1
      maxReplicas: 2