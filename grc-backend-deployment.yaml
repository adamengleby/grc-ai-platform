location: australiasoutheast
name: grc-backend
resourceGroup: rg-grc-ai-platform-syd
type: Microsoft.App/containerApps
properties:
  environmentId: /subscriptions/2e6b5431-6d83-4072-8ccc-86af69cf22b0/resourceGroups/rg-grc-ai-platform-syd/providers/Microsoft.App/managedEnvironments/grc-containerapp-env
  configuration:
    ingress:
      external: true
      targetPort: 8080
  template:
    containers:
    - name: grc-backend
      image: mcr.microsoft.com/azure-functions/node:4-node20-appservice
      resources:
        cpu: 1.0
        memory: 2Gi
        ephemeralStorage: 4Gi
      env:
      - name: NODE_ENV
        value: "production"
      - name: PORT
        value: "8080"
      - name: POSTGRES_HOST
        value: "grc-postgres-syd.postgres.database.azure.com"
      - name: POSTGRES_DATABASE
        value: "grc_platform"
      - name: POSTGRES_USER
        value: "grcadmin"
      - name: POSTGRES_PASSWORD
        value: "GRC2024!Secure"
      - name: CORS_ORIGINS
        value: "https://grc-frontend.calmmeadow-5080198e.australiasoutheast.azurecontainerapps.io,http://localhost:5173,*"
      command:
      - /bin/bash
      args:
      - -c
      - |
        set -e
        echo "🚀 GRC Backend v1.1.0 - CLEAN URLS (no simple suffix)..."

        # Install required tools
        apt-get update -qq
        apt-get install -y git curl

        # Clone latest code
        echo "📥 Cloning latest backend code..."
        rm -rf /tmp/repo 2>/dev/null || true
        git clone --depth 1 https://github.com/adamengleby/grc-ai-platform.git /tmp/repo
        cd /tmp/repo

        echo "📋 Latest commit:"
        git log -1 --oneline

        # Set up production server
        echo "🚚 Setting up production backend with clean URLs..."
        mkdir -p /app
        cd /app

        # Copy the server file
        cp /tmp/repo/packages/backend/containerapp-server-v7.js server.js

        # Create production package.json
        cat > package.json << 'EOF'
        {
          "name": "grc-backend",
          "version": "1.1.0",
          "main": "server.js",
          "dependencies": {
            "express": "^4.19.2",
            "cors": "^2.8.5",
            "pg": "^8.11.0"
          }
        }
        EOF

        echo "📦 Installing dependencies..."
        npm install

        echo "🔧 Adding clean URLs and tenant initialization..."
        # Update server.js for clean URLs and tenant setup
        cat > clean-urls-patch.js << 'EOF'
        const fs = require('fs');
        let serverCode = fs.readFileSync('server.js', 'utf8');

        // Update health endpoint with clean naming
        const healthEndpointPatch = `
        // Health check endpoint with clean URLs
        app.get('/health', async (req, res) => {
          res.header('Access-Control-Allow-Origin', '*');
          res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
          res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization, x-tenant-id, x-user-id');

          const currentTime = new Date();
          const healthStatus = {
            status: 'healthy',
            service: 'GRC Platform Backend - Clean URLs',
            version: \\`v1.1.0-clean-\\${currentTime.toISOString().split('T')[0]} \\${currentTime.toISOString().split('T')[1].split('.')[0]}\\`,
            timestamp: currentTime.toISOString(),
            environment: 'Azure Container Apps',
            corsEnabled: true,
            allowedOrigins: process.env.CORS_ORIGINS || '*',
            deployment: {
              containerName: 'grc-backend',
              version: 'v1.1.0-clean-urls',
              buildTime: currentTime.toISOString(),
              features: [
                'Clean URLs without simple suffix',
                'Production tenant initialization',
                'Database integration with tenant isolation',
                'CORS enabled for frontend'
              ]
            },
            database: {
              type: 'PostgreSQL',
              host: process.env.POSTGRES_HOST,
              user: process.env.POSTGRES_USER,
              database: process.env.POSTGRES_DATABASE,
              connected: false
            }
          };

          // Test database connection
          try {
            const db = getDatabase();
            const result = await db.query('SELECT 1 as health_check, version()');
            healthStatus.database.connected = true;
            healthStatus.database.result = result.rows[0];
            healthStatus.database.connectionInfo = 'Connected to ' + process.env.POSTGRES_HOST;

            // Check if default tenant exists
            const tenantCheck = await db.query('SELECT id FROM tenants LIMIT 1');
            healthStatus.database.defaultTenantExists = tenantCheck.rows.length > 0;
          } catch (error) {
            healthStatus.database.connected = false;
            healthStatus.database.error = error.message;
          }

          res.json(healthStatus);
        });`;

        // Add tenant initialization endpoint
        const tenantInitEndpoint = `
        // Initialize default tenant for testing
        app.post('/init-tenant', async (req, res) => {
          res.header('Access-Control-Allow-Origin', '*');
          try {
            const db = getDatabase();
            const tenantId = '123e4567-e89b-12d3-a456-426614174000';

            // Insert default tenant if doesn't exist
            await db.query(\\`
              INSERT INTO tenants (id, name, domain, subscription_tier, is_active)
              VALUES ($1, 'Default Tenant', 'default.local', 'enterprise', true)
              ON CONFLICT (id) DO NOTHING
            \\`, [tenantId]);

            res.json({
              success: true,
              tenantId: tenantId,
              message: 'Default tenant initialized'
            });
          } catch (error) {
            res.status(500).json({
              success: false,
              error: error.message
            });
          }
        });
        `;

        // Replace the existing health endpoint
        serverCode = serverCode.replace(
          /\\/\\/ Health check endpoint[\\s\\S]*?res\\.json\\(healthStatus\\);\\s*\\}\\);/,
          healthEndpointPatch
        );

        // Add tenant init endpoint before the health endpoint
        serverCode = serverCode.replace(
          /\\/\\/ Health check endpoint/,
          tenantInitEndpoint + '\\n// Health check endpoint'
        );

        fs.writeFileSync('server.js', serverCode);
        console.log('✅ Clean URLs and tenant initialization patch applied');
        EOF

        node clean-urls-patch.js

        echo "🧹 Cleaning up..."
        rm -rf /tmp/repo clean-urls-patch.js

        echo "🎉 Starting GRC Backend v1.1.0 with Clean URLs..."
        echo "🔗 Database Host: $POSTGRES_HOST"
        echo "🔗 Database User: $POSTGRES_USER"
        echo "🔗 Database Name: $POSTGRES_DATABASE"
        echo "🔗 CORS Origins: $CORS_ORIGINS"
        echo "📊 Version: Backend v1.1.0-clean-$(date +'%Y-%m-%d %H:%M:%S')"
        echo "🏷️  Clean URLs Features:"
        echo "    ✅ Clean URLs: grc-backend (no simple suffix)"
        echo "    ✅ Tenant initialization support"
        echo "    ✅ Database integration ready"
        echo "    ✅ CORS configured for clean frontend"
        node server.js
    scale:
      minReplicas: 1
      maxReplicas: 2